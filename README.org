#+title: Dorgygen: Source code documentation in org-mode
#+author: Stefano Ghirlanda
#+email: drghirlanda@gmail.com
#+options: toc:nil ':t
#+latex_header: \usepackage[margin=1in]{geometry}
#+latex_header: \usepackage[scaled=0.85]{couriers}
#+latex_header: \usepackage{mathptmx}
#+latex_header: \hypersetup{colorlinks=true}
#+latex_header: \setlength{\parskip}{1.5ex}
#+latex_header: \setlength{\parindent}{0pt}

*WARNING: This is work in progress. It only supports C and there is no customization.*

* Introduction

Dorgygen is an [[https://www.gnu/org/emacs][Emacs]] package to document source code in [[Https:///orgmode.org][Org]] documents with very minimal setup. You may find it useful if you don't want to do full-blown literate programming and if you like clean source code without extravagant markup. The idea is that source files are documented with short comments that don't clutter the code. Dorgygen then merges these comments with longer documentation (design decisions, algorithm explanations, etc.). Take this C file as an example:
#+begin_src C :exports code
  // the main function
  int                // exit value
  main( int argc,    // number of arguments
	char *argv[] // argument values
    );
#+end_src
As you can see, documentation is in plain comments (see [[Preparing source code]]). Dorgygen does not need special markup because it can determine that ~// number of arguments~ is a comment about ~int argc~, which in turn is a parameter of the function ~main~. Similarly, dorgygen can determine that ~// exit value~ is a comment about the return value of ~main~. Under the hood, this is accomplished using [[https://tree-sitter.github.io][tree-sitter]].

When dorgygen runs, source files ared pulled into your Org document as file-level headings with function subheadings. The example file above gives:
#+begin_src org :exports code
  ,* main.c

  ,** main

  - The main function.
  - In: ~int argc~. Number of arguments.
  - In: ~char *argv[]~. Argument values.
  - Out: ~int~. Exit value.
#+end_src
Once this documentation is generated, you can add more. For example:
#+begin_src org :exports code
  ,* main.c

  Here is documentation about the file.

  ,** main

  - The main function.
  - In: ~int argc~. Number of arguments.
  - In: ~char *argv[]~. Argument values.
  - Out: ~int~. Exit value.

  Here is documentation about the ~main~ function.
#+end_src
When you run dorgygen again, documentation from source files is updated and your text is preserved.

* Installation

Install manually from here. Hopefully from MELPA soon.

You need tree-sitter support.

* Using dorgygen

** Preparing source code

The template for commenting a C function is
#+begin_src C :exports code
  // brief function documentation
  int // return type documentation
  function(
    int arg1, // argument documentation
    ...
    );
#+end_src
Any of the documentation comments can be omitted. Because of semantic parsing, you are free to format your code how you like, provided comments are placed appropriately. For example, you could use the following style for C functions:
#+begin_src C :exports code
  /* brief function documentation */
  int                 /* return type documentation */
  function( int arg1, /* argument documentation */
	    ...
    );
#+end_src

All other comments are ignored. For a C project, one would typically add documentation comments to header files.  

** Preparing your org document 

There is only one mandatory setting: one heading in the document should have the property ~DORGYGEN_REX~ set to a regular expression that matches the source files to be documented. For example, the following instructs dorgygen to document all C headers in the ~src~ directory:
#+begin_src org :exports code
  ,* Documentation
  :PROPERTIES:
  :DORGYGEN_REX: src/\.h$
  :END:
#+end_src
dorgygen looks for the first header with the ~DORGYGEN_REX~ property around the point of invocation. This means that you can have multiple documentation sections in the same document, each with its own ~DORGYGEN_REX~ property.

The optional property ~DORGYGEN_LAN~ specifies a programming language. If it is not set, each file's extension is used to guess the language.   

** Generating documentation

~M-x dorgygen~

* TODO Bugs and limitations

Please submit bugs and feature requests as [[https://github.com/drghirlanda/dorgygen/issues][issues on Github]].

- [ ] Make sure functions are in the same order as in source files. 
- [ ] Load and init treesit without user having to load *-ts-mode first.
- [ ] Customizations.
