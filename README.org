#+title: Dorgygen: Source code documentation in org-mode
#+author: Stefano Ghirlanda
#+email: drghirlanda@gmail.com
#+options: toc:nil ':t
#+latex_header: \usepackage[margin=1in]{geometry}
#+latex_header: \usepackage[scaled]{couriers}
#+latex_header: \usepackage[scaled]{berasans}
#+latex_header: \renewcommand\familydefault\sfdefault
#+latex_header: \hypersetup{colorlinks=true}
#+latex_header: \setlength{\parskip}{1.5ex}
#+latex_header: \setlength{\parindent}{0pt}

*WARNING: This is work in progress. It only supports C and there is no customization.*

* Introduction

Dorgygen is an [[https://www.gnu/org/emacs][Emacs]] package to document source code in [[Https:///orgmode.org][Org]] documents with minimal setup. You may find it useful if you don't want/need full-blown literate programming and if you like source code without distracting markup. With dorgygen, source code is documented with short comments, which are then integrated with longer explanations in Org documents. Take this C file as an example:
#+begin_src C :exports code
  // the main function
  int                // exit value
  main( int argc,    // number of arguments
	char *argv[] // argument values
    );
#+end_src
As you can see, documentation is in plain comments. We don't need special markup because dorgygen understands that "~// number of arguments~" is a comment about "~int argc~," which in turn is a parameter of the function ~main~. Similarly, it understands that "~// exit value~" is a comment about the return value of ~main~ (to do this, dorgygen uses [[https://tree-sitter.github.io][tree-sitter]]).

When it runs, dorgygen scans source files for comments and creates corresponding Org headings and subheadings. The example file above gives:
#+begin_src org :exports code
  ,* main.c

  ,** main

  - The main function.
  - In: ~int argc~. Number of arguments.
  - In: ~char *argv[]~. Argument values.
  - Out: ~int~. Exit value.
#+end_src
Once this documentation is generated, you can add more. For example:
#+begin_src org :exports code
  ,* main.c

  Here is documentation about the file.

  ,** main

  - The main function.
  - In: ~int argc~. Number of arguments.
  - In: ~char *argv[]~. Argument values.
  - Out: ~int~. Exit value.

  Here is documentation about the ~main~ function.
#+end_src
When you run dorgygen again, documentation from source files is updated and your text is preserved.

* Installation

Install manually from [[https://github.com/drghirlanda/dorgygen][here]]. Hopefully from MELPA soon.

You need a recent Emacs with tree-sitter support.

* Using dorgygen

** Preparing source code

For a C project, one would typically add documentation comments to header files. The template for commenting a C function is
#+begin_src C :exports code
  // brief function documentation
  int // return type documentation
  function(
    int arg1, // argument documentation
    ...
    );
#+end_src
Any of the documentation comments can be omitted, and additional comments are ignored. You can format code to your liking, provided comments are placed appropriately, and you can use the ~/* ... */~ style.

** Preparing org documents 

There is only one mandatory setting: one heading in the document should have the property ~DORGYGEN_REX~ set to a regular expression that matches the source files to be documented. For example, the following instructs dorgygen to document all C headers in the ~src~ directory:
#+begin_src org :exports code
  ,* Documentation
  :PROPERTIES:
  :DORGYGEN_REX: src/\.h$
  :END:
#+end_src
Characters that are special in Emacs regular expressions must be escaped with a backslash.

Dorgygen looks for the first header with the ~DORGYGEN_REX~ property around the point of invocation. Thus you can have multiple documentation sections in the same document, each with its own ~DORGYGEN_REX~ property.

The optional property ~DORGYGEN_LAN~ specifies a programming language. If it is not set, each file's extension is used to guess the language.   

** Generating documentation

After you have commented source files and prepared the Org document, you just run ~M-x dorgygen~.

* TODO Bugs and limitations

Please submit bugs and feature requests as [[https://github.com/drghirlanda/dorgygen/issues][issues on Github]].
